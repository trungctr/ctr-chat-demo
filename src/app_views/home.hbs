<script src="/socket.io/socket.io.js"></script>
<style>
	.hidden {
		display: none;
	}

</style>
<div class="container" id="register-box">Đăng kí
	<div>
		<input type="text" placeholder="nhâp tên đăng nhập" style="" id="register-username" />
		<input type="password" placeholder="nhâp mật khẩu" style="" id="register-pw" />
		<button id='register' style="">Đăng ký</button>
	</div>
</div>
<div class="hidden" id='logout-box'>
	<form id="logout-form" method="post" action="/logout">
		<button id='logout' type="submit">Đăng xuất</button>
	</form>
</div>
<span style="
		display: inline-block;
 		height:350px; background-color: white;
		overflow: auto;
		height: 20px;">
</span>
<div class="container" id="login-box">Đăng nhập
	<div>
		<input type="text" placeholder="nhâp tên đăng nhập" style="" id="login-username" />
		<input type="password" placeholder="nhâp mật khẩu" style="" id="login-pw" />
		<button id='login' style="">Đăng nhập</button>
	</div>
</div>
<div class="hidden" id="main-container">
	<div>
		<input type="text" placeholder="nhâp tên group " style="" id="add-group-name" />
		<button id='add-group' style="">thêm group</button>
	</div>

	<span style="
		display: inline-block;
 		height:350px; background-color: white;
		overflow: auto;
		height: 50px;">
	</span>
	<div>
		<span style="
		display: inline-block;
		background-color: white;
		overflow: auto;
		border: 1px solid black;">
			Groups available
			<div id='group-list' style=""></div>
		</span>
		<span style="
		display: inline-block;
 		background-color: white;
		overflow: auto;
		border: 1px solid black;">
			Users online
			<div id='user-online-list' style=""></div>
		</span>
		<span style="
		display: inline-block;
 		background-color: white;
		overflow: auto;
		border: 1px solid black;">
			joint groups
			<div id='joint-group-list' style=""></div>
		</span>
		<span style="
			display: inline-block;
	 		background-color: white;
			overflow: auto;
			border: 1px solid black;">
			your groups
			<div id='your-group-list' style=""></div>
		</span>
		<span style="
					display: inline-block;
			 		background-color: white;
					overflow: auto;
					border: 1px solid black;">
			your dual chat
			<div id='paired-dual-list' style=""></div>
		</span>
	</div>
	<span>
		<div style="max-width: 300px; position:fixed; botom:20px; right: 20px; border:1px solid black; margin: 30px auto">
			chat with:<span id="dual-name"> nobody</span>
			<div>
				<div style="
		display: block;
 		height:350px; background-color: white;
		overflow: auto;
		border: 1px solid black;">
					<div id='dual-chat-content'></div>
					end
				</div>
				<div>
					<input type="text" style="display: block;
		height: 50px;
		background-color: white; border: 1px solid" id="dual-message-content" />
				</div>
				<div>
					<button id='dual-chat-send-button'>send</button>
				</div>
			</div>
		</div>
	</span>
	<span>
		<div style="max-width: 300px; position:fixed; botom:20px; left: 20px; border:1px solid black; margin: 30px auto">
			Group:<span id="group-chat-name"></span>
			<div>
				<div style="
		display: block;
 		height:350px; background-color: white;
		overflow: auto;
		border: 1px solid black;">
					<div id='group-chat-content'></div>
					end
				</div>
				<div>
					<input type="text" style="display: block;
		height: 50px;
		background-color: white; border: 1px solid" id="group-message-content" />
				</div>
				<div>
					<button id='group-chat-send-button'>send</button>
				</div>
			</div>
		</div>
	</span>
</div>
<script>
	var socket = io('/')
	function showMess(name, message, node)
	{
		var chatBox = document.getElementById(node)
		var messageContent = `<p class="chat-mess">${ name }:${ message }</p>`
		chatBox.insertAdjacentHTML('beforeEnd', messageContent)
	}

	function addGroup(g, n)
	{
		let Box = document.getElementById(n)
		let content = `<h4 id='${ String(g._id) }' class='group-available'>${ g.name }</h4>`
		Box.insertAdjacentHTML('beforeEnd', content)
	}

	function addUser(g, n)
	{
		let Box = document.getElementById(n)
		let content = `<h4 id='${ String(g._id) }' class='group-available'>${ g.username }</h4>`
		Box.insertAdjacentHTML('beforeEnd', content)
	}

	function clear(n)
	{
		let Box = document.getElementById(n)
		Box.innerHTML = ''
	}
	function remove(n)
	{
		var node = document.getElementById(n)
		node.parentNode.removeChild(node)
	}

	function setCookie(cname, cvalue, exdays)
	{
		var d = new Date()
		d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000))
		var expires = "expires=" + d.toUTCString();
		document.cookie = cname + "=" + cvalue + "; " + expires
	}

	function getCookie(cname)
	{
		var name = cname + "="
		var ca = document.cookie.split(';')
		for (var i = 0;i < ca.length;i++) {
			var c = ca[i]
			while (c.charAt(0) == ' ') c = c.substring(1)
			if (c.indexOf(name) == 0) return c.substring(name.length, c.length)
		}
		return "";
	}

	//---------------------------------------------------

	// public rooms
	socket.on('public', async (d) =>
	{
		await clear('group-list')
		for (var i = 0;i < d.allRooms.length;i++) {
			addGroup(d.allRooms[i], 'group-list')
		}
	})

	//public user
	socket.on('publicUser', async (d) =>
	{
		await clear('user-online-list')
		for (var i = 0;i < d.length;i++) {
			addUser(d[i], 'user-online-list')
		}
	})

	//joint rooms
	socket.on('jointRooms', async (d) =>
	{
		await clear('joint-group-list')
		for (var i = 0;i < d.length;i++) {
			addGroup(d[i], 'joint-group-list')
		}
	})

	//your rooms
	socket.on('yourRooms', async (d) =>
	{
		await clear('your-group-list')
		for (var i = 0;i < d.length;i++) {
			addGroup(d[i], 'your-group-list')
		}
	})

	//your dual paired ****
	socket.on('dualPaired', async (d) =>
	{
		if (d) {
			await clear('pared-dual-list')
			for (var i = 0;i < d.length;i++) {
				addGroup(d[i], 'pared-dual-list')
			}
		}
	})

	//Register
	document.getElementById('register').onclick = () =>
	{
		var username = document.getElementById('register-username').value
		var password = document.getElementById('register-pw').value
		socket.emit('register', {
			username, password
		})
	}

	socket.on('register', (d) =>
	{
		if (d) {
			alert('đăng ký thành công bạn có thể đăng nhập để sử dụng dịch vụ')
		} else {
			alert('đăng ký thất bại. bạn hãy thử lại')
		}
	})

	//Login
	document.getElementById('login').onclick = () =>
	{
		var username = document.getElementById('login-username').value
		var password = document.getElementById('login-pw').value
		socket.emit('login', {
			username, password
		})
	}
	socket.on('login', (d) =>
	{
		if (d.status == true) {
			setCookie('ctrdata1', d.ctrdata1, 0.006)
			setCookie('ctrdata2', d.ctrdata2, 30)
			document.getElementById('login-box').classList.add('hidden')
			document.getElementById('main-container').classList.remove('hidden')
			document.getElementById('logout-box').classList.remove('hidden')
			alert('đăng nhập thành công')
		} else {
			alert(d.message)
		}
	})


	//logout
	document.getElementById('logout').onclick = () =>
	{
		document.getElementById('login-box').classList.remove('hidden')
		document.getElementById('main-container').classList.add('hidden')
		document.getElementById('logout-box').classList.add('hidden')
		socket.emit('disconnect', ime)
	}

	//create room
	document.getElementById('add-group').onclick = () =>
	{
		var groupName = document.getElementById('add-group-name').value
		socket.emit('add-group', {
			ime,
			groupName,
		})
	}
	socket.on('add-group', (d) =>
	{
		if (d.status == true) {
			addGroup(d.group, 'group-list')
		} else {
			alert(d.message)
		}
	})


	//delete room (editing)
	document.getElementsByClassName('group').onclick = () =>
	{
		socket.emit('remove-group')
	}


	//current dual chat
	document.getElementById('dual-chat-send-button').onclick = () =>
	{
		var message = document.getElementById('dual-message-content').value
		socket.emit('dual-chat', {
			name, message
		})
	}

	socket.on('dual-chat', (d) =>
	{
		let name = d.name
		let message = d.message
		showMess(name, message, 'group-chat-content')
	})



	//current group chat

	document.getElementById('group-chat-send-button').onclick = () =>
	{
		var message = document.getElementById('message-content').value
		socket.emit('group-chat', {
			name, message
		})
	}

	//nhận tin nhắn nhóm
	socket.on('group-chat', (d) =>
	{
		let name = d.name
		let message = d.message
		showMess(name, message, 'group-chat-content')
	})

</script>
