<script src="/socket.io/socket.io.js"></script>
<style>
	.hidden {
		display: none;
	}

</style>
<div class="container" id="register-box">Đăng kí
	<div>
		<input type="text" placeholder="nhâp tên đăng nhập" style="" id="register-username" />
		<input type="password" placeholder="nhâp mật khẩu" style="" id="register-pw" />
		<button id='register' style="">Đăng ký</button>
	</div>
</div>
<div class="hidden" id='logout-box'>
	<form id="logout-form" method="post" action="/logout">
		<button id='logout' type="submit">Đăng xuất</button>
	</form>
</div>
<span style="
		display: inline-block;
 		height:350px; background-color: white;
		overflow: auto;
		height: 20px;">
</span>
<div class="container" id="login-box">Đăng nhập
	<div>
		<input type="text" placeholder="nhâp tên đăng nhập" style="" id="login-username" />
		<input type="password" placeholder="nhâp mật khẩu" style="" id="login-pw" />
		<button id='login' style="">Đăng nhập</button>
	</div>
</div>
<div class="hidden" id="main-container">
	<div>
		<input type="text" placeholder="nhâp tên group " style="" id="add-group-name" />
		<button id='add-group' style="">thêm group</button>
	</div>
	<div>
		<span>user name:</span><span id="myUsername" ></span>
	</div>
	<div>
		<span >soketid by System:</span><span id="stID"></span>
	</div>
	<div>
		<span >soketid by login:</span><span id="loginID"></span>
	</div>
	<div>
		<span id="testWaring" style="color:red; font-weight:bold; font-size: 20px"></span>
	</div>

	<span style="
		display: inline-block;
 		height:350px; background-color: white;
		overflow: auto;
		height: 50px;">
	</span>
	<div>
		<span style="
		display: inline-block;
		background-color: white;
		overflow: auto;
		border: 1px solid black;">
			Groups available
			<div id='group-list' style=""></div>
		</span>
		<span style="
		display: inline-block;
 		background-color: white;
		overflow: auto;
		border: 1px solid black;">
			Users online
			<div id='user-online-list' style=""></div>
		</span>
		<span style="
		display: inline-block;
 		background-color: white;
		overflow: auto;
		border: 1px solid black;">
			joint groups
			<div id='joint-group-list' style=""></div>
		</span>
		<span style="
			display: inline-block;
	 		background-color: white;
			overflow: auto;
			border: 1px solid black;">
			your groups
			<div id='your-group-list' style=""></div>
		</span>
		<span style="
					display: inline-block;
			 		background-color: white;
					overflow: auto;
					border: 1px solid black;">
			your dual chat
			<div id='paired-dual-list' style=""></div>
		</span>
	</div>
	<span>
		<div style="max-width: 300px; position:fixed; bottom:20px; right: 20px; border:1px solid black;">
			chat with:<span id="dual-name">nobody</span>
			<div>
				<div style="
		display: block;
 		height:350px; background-color: white;
		overflow: auto;
		border: 1px solid black;">
					<div class="dual-chat-content" id='' tradeline-type='dual-chat' style="">
					</div>
				</div>
				<div>
					<input type="text" style="display: block;
		height: 50px;
		background-color: white; border: 1px solid" class="dual-chat-edit" id="" />
				</div>
				<div>
					<button class='chat-send-button dual-chat-btn' id=''>send</button>
				</div>
			</div>
		</div>
	</span>
	<span>
		<div style="max-width: 300px; position:fixed; bottom:20px; left: 20px; border:1px solid black;">
			Group:<span id="group-chat-name"></span>
			<div>
				<div style="
		display: block;
 		height:350px; background-color: white;
		overflow: auto;
		border: 1px solid black;">
					<div class="group-chat-content" id='' tradeline-type='group' style="">
					</div>
				</div>
				<div>
					<input type="text" style="display: block;
		height: 50px;
		background-color: white; border: 1px solid" class="group-chat-edit" id="" />
				</div>
				<div>
					<button class='chat-send-button group-chat-btn' id=''>send</button>
				</div>
			</div>
		</div>
	</span>
</div>
<script>
	var socket = io('/')
	socket.on('connected', function(d){
		document.getElementById('stID').textContent = d
		testWaring()
	})
	var ime = '' // my ID (this is not socket id)
	var currentDualWithId = '' // dual with this id now (this is not socket id)
	var currentDualRoomId = '' // dual with this room id now (this is not socket id)
	var currentGroupId = ''
	var currentGroupSocketId = []

 function testWaring(){
	 var f1 = document.getElementById('stID').textContent
	 var f2 = document.getElementById('loginID').textContent
	 var f3 = document.getElementById('testWaring')
	 var ct = 'server đã reset, hãy đăng nhập lại để tránh lỗi'
	 if (f1 !== f2) {f3.textContent = ct}else{f3.textContent = ''}
 }

	function showMess(message, node)
	{
		var chatBox = document.getElementById('box-' + node)
		var messageContent = `<p class="chat-mess">${ message.content }</p>`
		chatBox.insertAdjacentHTML('beforeEnd', messageContent)
	}

	function addGroup(g, n, type)
	{
		let Box = document.getElementById(n)
		let content = `<h4 id='${ String(g._id) }' class='group-${ type } group'>${ g.name }
			<button class="delete-${ type }-btn" id='btn-${ String(g._id) }'>X</button></h4>`
		Box.insertAdjacentHTML('beforeEnd', content)
	}

	function addUser(g, n)
	{
		let Box = document.getElementById(n)
		let content = `<h4 id='${ g.userId }' class='user'>${ g.username }</h4>`
		Box.insertAdjacentHTML('beforeEnd', content)
	}

	function clear(n)
	{
		let Box = document.getElementById(n)
		if (Box) {Box.innerHTML = ''}
	}

	function remove(n)
	{
		var node = document.getElementById(n)
		if (node) {
			node.parentNode.removeChild(node)
		}
	}

	function getRandomInt(max)
	{
		return Math.floor(Math.random() * max);
	}

	function setCookie(cname, cvalue, exdays)
	{
		var d = new Date()
		d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000))
		var expires = "expires=" + d.toUTCString();
		document.cookie = cname + "=" + cvalue + "; " + expires
	}

	function getCookie(cname)
	{
		var name = cname + "="
		var ca = document.cookie.split(';')
		for (var i = 0;i < ca.length;i++) {
			var c = ca[i]
			while (c.charAt(0) == ' ') c = c.substring(1)
			if (c.indexOf(name) == 0) return c.substring(name.length, c.length)
		}
		return "";
	}

	//---------------------------------------------------

	// public rooms
	socket.on('public', async (d) =>
	{
		await clear('group-list')
		for (var i = 0;i < d.allRooms.length;i++) {
			addGroup(d.allRooms[i], 'group-list', 'public')
		}
	})

	//public user
	socket.on('ping', async function (d)
	{
		addUser(d, 'user-online-list')
	})

	socket.on('publicUser', async function (d)
	{
		for (var i = 0;i < d.length;i++) {
			addUser(d[i], 'user-online-list')
		}
	})

	//user offline
	socket.on('offline', async function (d)
	{
		remove(d)
	})

	//joint rooms
	socket.on('jointRooms', async (d) =>
	{
		if (d.length > 1) {
			await clear('joint-group-list')
			for (var i = 0;i < d.length;i++) {
				addGroup(d[i], 'joint-group-list', 'joint')
			}
		} else {
			addGroup(d, 'joint-group-list', 'joint')
		}
	})

	//your rooms
	socket.on('yourRooms', async (d) =>
	{
		if (d.length > 1) {
			await clear('your-group-list')
			for (var i = 0;i < d.length;i++) {
				addGroup(d[i], 'your-group-list', 'your')
			}
		} else {
			addGroup(d, 'your-group-list', 'your')
		}
	})

	//your dual paired
	socket.on('dualPaired', async (d) =>
	{
		if (d) {
			await clear('paired-dual-list')
			for (var i = 0;i < d.length;i++) {
				addGroup(d[i], 'paired-dual-list', 'paired')
			}
		}
	})

	//Register
	document.getElementById('register').onclick = () =>
	{
		var username = document.getElementById('register-username').value
		var password = document.getElementById('register-pw').value
		socket.emit('register', {
			username, password
		})
	}

	socket.on('register', (d) =>
	{
		if (d) {
			alert('đăng ký thành công bạn có thể đăng nhập để sử dụng dịch vụ')
		} else {
			alert('đăng ký thất bại. bạn hãy thử lại')
		}
	})

	//Login
	document.getElementById('login').onclick = () =>
	{
		var username = document.getElementById('login-username').value
		var password = document.getElementById('login-pw').value
		socket.emit('login', {
			username, password
		})
	}
	socket.on('login', (d) =>
	{
		if (d.status == true) {
			if (d.ctrdata1) {
				setCookie('ctrdata1', d.ctrdata1, 0.006)
				setCookie('ctrdata2', d.ctrdata2, 30)
				document.getElementById('login-box').classList.add('hidden')
				document.getElementById('main-container').classList.remove('hidden')
				document.getElementById('logout-box').classList.remove('hidden')
				document.getElementById('myUsername').textContent = d.username
				document.getElementById('loginID').textContent = d.socketId
				testWaring()
				alert('đăng nhập thành công')
				ime = d.id
				console.log('my id:', ime)
			} else {
				alert('đăng nhập thất bại')
			}
		}
	})


	//logout
	document.getElementById('logout').onclick = () =>
	{
		document.getElementById('login-box').classList.remove('hidden')
		document.getElementById('main-container').classList.add('hidden')
		document.getElementById('logout-box').classList.add('hidden')
		socket.emit('logout', ime)
	}

	//create room
	document.getElementById('add-group').onclick = () =>
	{
		var groupName = document.getElementById('add-group-name').value
		socket.emit('add-group', {
			ime,
			groupName,
		})
	}
	socket.on('add-group', (d) =>
	{
		if (d) {
			addGroup(d, 'group-list')
		} else {
			alert('tạo phòng thất bại')
		}
	})


	//delete room 
	var delBtnList = document.getElementsByClassName('delete-your-btn')
	document.addEventListener('mousedown', (e) =>
	{
		for (var i = 0;i < delBtnList.length;i++) {
			delBtnList[i].onclick = (e) =>
			{
				var id = e.target.getAttribute('id').split('-')[1]
				socket.emit('removeGroup', id)
				return null
			}
		}
	})

	socket.on('removeGroup', (data) =>
	{
		var groups = document.getElementsByClassName('group')
		if (data) {
			for (var i = 0;i < groups.length;i++) {
				if (groups[i].getAttribute('id') == data) {
					remove(data)
				}
			}

		} else {
			alert('xóa phòng thất bại')
		}
	})


	//pairing - dual chat init
	var dualWithName = ''
	document.addEventListener('mousedown', (e) =>
	{
		var pair = document.getElementsByClassName('user')
		for (var i = 0;i < pair.length;i++) {
			pair[i].onclick = (e) =>
			{
				dualWithName = e.target.textContent
				var dualWithId = e.target.getAttribute('id') // lấy id người muốn chat riêng
				socket.emit('pairing', {id: dualWithId, ime})
				return null
			}
		}
	})

	socket.on('pairing', (d) =>// ghép cặp thành công
	{
		if (d.status == true) {
			currentDualRoomId = d.roomId
			document.getElementsByClassName('dual-chat-btn')[0].setAttribute('id', 'btn-' + currentDualRoomId)
			document.getElementsByClassName('dual-chat-edit')[0].setAttribute('id', 'me-' + currentDualRoomId)
			let chatBox = document.getElementsByClassName('dual-chat-content')[0]
			chatBox.setAttribute('id', 'box-' + currentDualRoomId)
			clear('box-' + currentDualRoomId)
			document.getElementById('dual-name').textContent = dualWithName
			socket.emit('syncMessage', {id: currentDualWithId, ime, roomId: currentDualRoomId})
		} else {
			alert(`kết nối với ${ dualWithName } không thành công hãy thử lại`)
		}
	})

	//join room - group chat init (editing) ****
	var joinGrName = ''
	document.addEventListener('mousedown', (e) =>
	{
		let join = document.getElementsByClassName('group')
		for (var i = 0;i < join.length;i++) {
			join[i].onclick = (e) =>
			{
				joinGrName = e.target.textContent
				let joinGroupId = e.target.getAttribute('id') // lấy id phòng muốn vào
				socket.emit('joinGroup', {id: joinGroupId, ime})
				return null
			}
		}
	})

	socket.on('joinGroup', (d) =>
	{
		if (d.status == true) {
			currentGroupId = d.roomId
			document.getElementsByClassName('group-chat-btn')[0].setAttribute('id', 'btn-' + currentGroupId)
			document.getElementsByClassName('group-chat-edit')[0].setAttribute('id', 'me-' + currentGroupId)
			let chatBox = document.getElementsByClassName('group-chat-content')[0]
			chatBox.setAttribute('id', 'box-' + currentGroupId)
			clear('box-' + currentGroupId)
			document.getElementById('group-chat-name').textContent = joinGrName
			socket.emit('syncMessage', {ime, roomId: currentGroupId})
		} else {
			alert(`vào phòng ${ joinGrName } không thành công hãy thử lại`)
		}
	})

	//syncMessage
	socket.on('syncMessage', (d) =>
	{
		if (d.status == true) {
			for (var i = 0;i < d.data.length;i++) {
				showMess(d.data[i], d.roomId)
			}
		} else {
			console.log('syncMessage failed !!')
		}
	})

	//send message
	document.addEventListener('mousedown', (e) =>
	{
		let sendBtns = document.getElementsByClassName('chat-send-button')
		for (var i = 0;i < sendBtns.length;i++) {
			sendBtns[i].onclick = (e) =>
			{
				let roomId = e.target.getAttribute('id').split('-')[1]
				let messToken = Number(new Date()) + '_' + String(getRandomInt(20))
				let message = document.getElementById('me-' + roomId).value
				socket.emit('sendMessage', {
					ime,
					id: currentDualWithId,
					roomId,
					message,
					token: messToken
				})
			}
		}
	})

	socket.on('sendMessage', (d) =>
	{
		if (d.status == true) {
				showMess(d.message, d.roomId)
		} else {
			console.log('message send failed !!')
		}
	})

</script>
